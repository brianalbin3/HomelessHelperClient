[{"C:\\Users\\FamilyPC\\client\\src\\index.tsx":"1","C:\\Users\\FamilyPC\\client\\src\\theme.js":"2","C:\\Users\\FamilyPC\\client\\src\\contexts\\authContext.js":"3","C:\\Users\\FamilyPC\\client\\src\\App.tsx":"4","C:\\Users\\FamilyPC\\client\\src\\api\\auth.tsx":"5","C:\\Users\\FamilyPC\\client\\src\\components\\ContactSettings.tsx":"6","C:\\Users\\FamilyPC\\client\\src\\components\\Medicine.tsx":"7","C:\\Users\\FamilyPC\\client\\src\\components\\Alarms.tsx":"8","C:\\Users\\FamilyPC\\client\\src\\components\\Schedule.tsx":"9","C:\\Users\\FamilyPC\\client\\src\\components\\Main.tsx":"10","C:\\Users\\FamilyPC\\client\\src\\components\\AccountSettings.tsx":"11","C:\\Users\\FamilyPC\\client\\src\\components\\Splash.tsx":"12","C:\\Users\\FamilyPC\\client\\src\\components\\Register.tsx":"13","C:\\Users\\FamilyPC\\client\\src\\components\\PrivateRoute.tsx":"14","C:\\Users\\FamilyPC\\client\\src\\components\\Login.tsx":"15","C:\\Users\\FamilyPC\\client\\src\\components\\PasswordInput.tsx":"16","C:\\Users\\FamilyPC\\client\\src\\components\\Header.tsx":"17","C:\\Users\\FamilyPC\\client\\src\\api\\user.tsx":"18","C:\\Users\\FamilyPC\\client\\src\\components\\FindAccount.tsx":"19","C:\\Users\\FamilyPC\\client\\src\\components\\EnterCode.tsx":"20","C:\\Users\\FamilyPC\\client\\src\\components\\ResetPassword.tsx":"21","C:\\Users\\FamilyPC\\client\\src\\components\\PickResetMethod.tsx":"22","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineList.tsx":"23","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineListItem.tsx":"24","C:\\Users\\FamilyPC\\client\\src\\components\\AddMedicineDialog.tsx":"25","C:\\Users\\FamilyPC\\client\\src\\models\\Units.tsx":"26","C:\\Users\\FamilyPC\\homelessclient\\src\\index.tsx":"27","C:\\Users\\FamilyPC\\homelessclient\\src\\theme.js":"28","C:\\Users\\FamilyPC\\homelessclient\\src\\contexts\\authContext.js":"29","C:\\Users\\FamilyPC\\homelessclient\\src\\App.tsx":"30","C:\\Users\\FamilyPC\\homelessclient\\src\\api\\auth.tsx":"31","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\AccountSettings.tsx":"32","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Main.tsx":"33","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Schedule.tsx":"34","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Splash.tsx":"35","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Login.tsx":"36","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PickResetMethod.tsx":"37","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Register.tsx":"38","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\FindAccount.tsx":"39","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\EnterCode.tsx":"40","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PrivateRoute.tsx":"41","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ResetPassword.tsx":"42","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Header.tsx":"43","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PasswordInput.tsx":"44","C:\\Users\\FamilyPC\\homelessclient\\src\\api\\user.tsx":"45","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\MedicineListItem.tsx":"46","C:\\Users\\FamilyPC\\homelessclient\\src\\models\\Units.tsx":"47","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\MapComponent.tsx":"48","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PrayerRequests.tsx":"49","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\HomelessPeople.tsx":"50","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\AddEventDialog.tsx":"51","C:\\Users\\FamilyPC\\homelessclient\\src\\api\\event.tsx":"52","C:\\Users\\FamilyPC\\homelessclient\\src\\models\\Event.tsx":"53","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ErrorBox.tsx":"54","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ViewEventDialog.tsx":"55"},{"size":510,"mtime":1610936025058,"results":"56","hashOfConfig":"57"},{"size":388,"mtime":1607739491786,"results":"58","hashOfConfig":"57"},{"size":649,"mtime":1608760470093,"results":"59","hashOfConfig":"57"},{"size":1869,"mtime":1610936956735,"results":"60","hashOfConfig":"57"},{"size":642,"mtime":1610939553789,"results":"61","hashOfConfig":"57"},{"size":407,"mtime":1610937777653,"results":"62","hashOfConfig":"57"},{"size":2158,"mtime":1644005118219,"results":"63","hashOfConfig":"57"},{"size":330,"mtime":1610939231259,"results":"64","hashOfConfig":"57"},{"size":342,"mtime":1610936868537,"results":"65","hashOfConfig":"57"},{"size":533,"mtime":1610937503128,"results":"66","hashOfConfig":"57"},{"size":1183,"mtime":1610937379016,"results":"67","hashOfConfig":"57"},{"size":827,"mtime":1608440931949,"results":"68","hashOfConfig":"57"},{"size":6029,"mtime":1610937468259,"results":"69","hashOfConfig":"57"},{"size":874,"mtime":1610937585733,"results":"70","hashOfConfig":"57"},{"size":5803,"mtime":1610937556765,"results":"71","hashOfConfig":"57"},{"size":2151,"mtime":1611017652345,"results":"72","hashOfConfig":"57"},{"size":2727,"mtime":1610937625198,"results":"73","hashOfConfig":"57"},{"size":765,"mtime":1610939565951,"results":"74","hashOfConfig":"57"},{"size":4437,"mtime":1610936910696,"results":"75","hashOfConfig":"57"},{"size":8118,"mtime":1610937679226,"results":"76","hashOfConfig":"57"},{"size":6528,"mtime":1610937414761,"results":"77","hashOfConfig":"57"},{"size":6297,"mtime":1610936562302,"results":"78","hashOfConfig":"57"},{"size":764,"mtime":1610937651078,"results":"79","hashOfConfig":"57"},{"size":2478,"mtime":1610937811575,"results":"80","hashOfConfig":"57"},{"size":7719,"mtime":1611466641382,"results":"81","hashOfConfig":"57"},{"size":125,"mtime":1611461625576,"results":"82","hashOfConfig":"57"},{"size":510,"mtime":1610936025058,"results":"83","hashOfConfig":"84"},{"size":388,"mtime":1607739491786,"results":"85","hashOfConfig":"84"},{"size":649,"mtime":1608760470093,"results":"86","hashOfConfig":"84"},{"size":1906,"mtime":1644855272455,"results":"87","hashOfConfig":"84"},{"size":642,"mtime":1610939553789,"results":"88","hashOfConfig":"84"},{"size":4800,"mtime":1645124176087,"results":"89","hashOfConfig":"84"},{"size":584,"mtime":1644368844022,"results":"90","hashOfConfig":"84"},{"size":8724,"mtime":1645063516438,"results":"91","hashOfConfig":"84"},{"size":836,"mtime":1644207061189,"results":"92","hashOfConfig":"84"},{"size":5803,"mtime":1610937556765,"results":"93","hashOfConfig":"84"},{"size":6297,"mtime":1610936562302,"results":"94","hashOfConfig":"84"},{"size":6029,"mtime":1610937468259,"results":"95","hashOfConfig":"84"},{"size":4437,"mtime":1610936910696,"results":"96","hashOfConfig":"84"},{"size":8118,"mtime":1610937679226,"results":"97","hashOfConfig":"84"},{"size":874,"mtime":1610937585733,"results":"98","hashOfConfig":"84"},{"size":6528,"mtime":1610937414761,"results":"99","hashOfConfig":"84"},{"size":2700,"mtime":1644244052599,"results":"100","hashOfConfig":"84"},{"size":2151,"mtime":1611017652345,"results":"101","hashOfConfig":"84"},{"size":765,"mtime":1610939565951,"results":"102","hashOfConfig":"84"},{"size":2478,"mtime":1610937811575,"results":"103","hashOfConfig":"84"},{"size":125,"mtime":1611461625576,"results":"104","hashOfConfig":"84"},{"size":417,"mtime":1644209153949,"results":"105","hashOfConfig":"84"},{"size":400,"mtime":1644244137951,"results":"106","hashOfConfig":"84"},{"size":400,"mtime":1644244038974,"results":"107","hashOfConfig":"84"},{"size":11264,"mtime":1645062712629,"results":"108","hashOfConfig":"84"},{"size":378,"mtime":1645027787652,"results":"109","hashOfConfig":"84"},{"size":144,"mtime":1644542726560,"results":"110","hashOfConfig":"84"},{"size":630,"mtime":1644606913178,"results":"111","hashOfConfig":"84"},{"size":4416,"mtime":1645072809263,"results":"112","hashOfConfig":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"187ra08",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"115"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"115"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"115"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"115"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"115"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"115"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"115"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"115"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},"1ftm1y2",{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"178"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"178"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"178"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"178"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"178"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"178"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"178"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"178"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"178"},"C:\\Users\\FamilyPC\\client\\src\\index.tsx",[],["244","245"],"C:\\Users\\FamilyPC\\client\\src\\theme.js",[],["246","247"],"C:\\Users\\FamilyPC\\client\\src\\contexts\\authContext.js",[],"C:\\Users\\FamilyPC\\client\\src\\App.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\api\\auth.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\ContactSettings.tsx",["248"],"import React  from 'react';\r\n\r\ntype ContactSettingsState = {\r\n\r\n}\r\n\r\ntype ContactSettingsProps = {\r\n\r\n}\r\n\r\nclass ContactSettings extends React.Component<ContactSettingsProps, ContactSettingsState> {\r\n    constructor(props: ContactSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>ContactSettings</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactSettings;","C:\\Users\\FamilyPC\\client\\src\\components\\Medicine.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Alarms.tsx",["249"],"import React  from 'react';\r\n\r\ntype AlarmsState = {\r\n  \r\n}\r\n\r\ntype AlarmsProps = {\r\n\r\n}\r\n\r\nclass Alarms extends React.Component<{}, AlarmsState> {\r\n    constructor(props: AlarmsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <h1>Alarms</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alarms;","C:\\Users\\FamilyPC\\client\\src\\components\\Schedule.tsx",["250"],"import React from 'react';\r\n\r\ntype ScheduleState = {}\r\n\r\ntype ScheduleProps = {}\r\n\r\nclass Schedule extends React.Component<ScheduleProps, ScheduleState> {\r\n    constructor(props: ScheduleProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Schedule</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;","C:\\Users\\FamilyPC\\client\\src\\components\\Main.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\AccountSettings.tsx",["251"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\ntype AccountSettingsState = {}\r\n\r\ntype AccountSettingsProps = {\r\n    history: any;\r\n}\r\n\r\nclass AccountSettings extends React.Component<AccountSettingsProps, AccountSettingsState> {\r\n    constructor(props: AccountSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit(callback: any) {\r\n        try {\r\n            auth.logout();\r\n\r\n            callback();\r\n\r\n            this.props.history.push('/login');\r\n        }\r\n        catch(error) {\r\n            console.log('error',error)\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Account Settings</h1>\r\n\r\n                <AuthContextConsumer>\r\n                {context => (\r\n                    <Button onClick={ e => this.handleSubmit(context.logout)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Logout</Button>\r\n                )}\r\n                </AuthContextConsumer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountSettings;","C:\\Users\\FamilyPC\\client\\src\\components\\Splash.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Register.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PrivateRoute.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\Login.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PasswordInput.tsx",["252"],"import { InputAdornment } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport React, {Component } from 'react';\r\n\r\nimport './PasswordInput.css';\r\n\r\ntype PasswordInputState = {\r\n    passwordIsMasked: boolean\r\n}\r\n\r\n//https://itnext.io/building-a-toggled-mask-password-input-component-w-react-and-material-ui-f55e6bd73434\r\n\r\n\r\ntype PasswordInputProps = {\r\n    classes?: any,\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    value?: string,\r\n    error?: boolean,\r\n    helperText?: string,\r\n    label?: string,\r\n    className?: string,\r\n    inputProps?: object,\r\n}\r\n\r\nclass PasswordInput extends Component<PasswordInputProps, PasswordInputState> {\r\n    constructor(props: PasswordInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            passwordIsMasked: true\r\n        };\r\n    }\r\n\r\n    togglePasswordMask = () => {\r\n        this.setState(prevState => ({\r\n            passwordIsMasked: !prevState.passwordIsMasked\r\n        }));\r\n    }\r\n\r\n    getVisibilityIcon() {\r\n        if ( this.state.passwordIsMasked ) {\r\n            return (\r\n                <VisibilityIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <VisibilityOffIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { passwordIsMasked } = this.state;\r\n\r\n        return (\r\n            <TextField\r\n                variant=\"filled\"\r\n                type={passwordIsMasked ? 'password' : 'text'}\r\n                {...this.props}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            {this.getVisibilityIcon()}\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PasswordInput;","C:\\Users\\FamilyPC\\client\\src\\components\\Header.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\api\\user.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\FindAccount.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\EnterCode.tsx",["253","254"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './EnterCode.css';\r\n\r\nenum EnterCodeStatusType {\r\n    NONE,\r\n    INVALID_PASSCODE,\r\n    CODE_EXPIRED,\r\n    TOO_MANY_ATTEMPTS,\r\n    INTERNAL_SERVER_ERROR,\r\n    RESENT_CODE\r\n}\r\n\r\ntype EnterCodeState = {\r\n    selectedContactMethod: string,\r\n    email: string,\r\n    phone: string,\r\n    submitIsTouched: boolean,\r\n    code: string,\r\n    enterCodeStatusType: EnterCodeStatusType\r\n}\r\n\r\ntype EnterCodeProps = {\r\n    location: any, // TODO: type\r\n    history: any, // TODO: type\r\n}\r\n\r\n\r\nclass EnterCode extends React.Component<EnterCodeProps, EnterCodeState> {\r\n\r\n    constructor(props: EnterCodeProps) {\r\n        super(props);\r\n\r\n        let selectedContactMethod: any = '';\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        if ( qsParse ) {\r\n            selectedContactMethod = qsParse.selectedContactMethod;\r\n            email = qsParse.email; // Need email either way for back button\r\n            \r\n            if ( selectedContactMethod === 'phone' ) {\r\n                phone = qsParse.phone;\r\n            }\r\n        }\r\n\r\n        this.state = { selectedContactMethod, email, phone, submitIsTouched: false, code: '', enterCodeStatusType: EnterCodeStatusType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCodeChange = this.handleCodeChange.bind(this);\r\n        this.resendCodeClicked = this.resendCodeClicked.bind(this);\r\n    }\r\n\r\n    handleCodeChange(e: any) {\r\n        const code: string = e.target.value;\r\n        this.setState({code});\r\n    }\r\n\r\n    getCodeHelperText(): string {\r\n        if ( this.displayCodeTextFieldError() ) {\r\n            return 'Code must be 8 digits';\r\n        }\r\n\r\n        const { selectedContactMethod} = this.state;\r\n        \r\n        return `Enter the 8 digit code sent to your ${selectedContactMethod}.`;\r\n    }\r\n\r\n    codeIsValid(): boolean {\r\n        return this.state.code.length === 8;\r\n    }\r\n\r\n    displayCodeTextFieldError(): boolean {\r\n        const { submitIsTouched, code } = this.state;\r\n\r\n        if ( !submitIsTouched ) {\r\n            return false\r\n        }\r\n\r\n        return !this.codeIsValid();\r\n    }\r\n      \r\n    async handleSubmit(e: any) {\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( !this.codeIsValid() ) {\r\n            return;\r\n        }\r\n        \r\n        const { email, code, selectedContactMethod, phone } = this.state;\r\n\r\n        try {\r\n\r\n            await userAPI.checkResetCode(email, code);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.NONE});\r\n\r\n            // TODO: should I just do history.back or something\r\n            if (selectedContactMethod === 'email') {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n            else {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n        }\r\n        catch(error) {\r\n            console.error(\"error\",error)\r\n\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Invalid email/passcode combination') {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.INVALID_PASSCODE});\r\n                }\r\n                else if ( error.response.data.message === 'Reset code has expired' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.CODE_EXPIRED});\r\n                }\r\n                else if ( error.response.data.message === 'Too many failed attempts' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.TOO_MANY_ATTEMPTS});\r\n                }\r\n            }\r\n            else { //500, 'The server encountered an unknown error.', 400, Email and/or resetCode not sent (shouldn't ever happen)\r\n                this.setState({enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormHelperText(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.NONE;\r\n    }\r\n\r\n    getFormHelperText(): string {\r\n        const { enterCodeStatusType, selectedContactMethod, email, phone } = this.state;\r\n\r\n        if ( enterCodeStatusType === EnterCodeStatusType.INVALID_PASSCODE ) {\r\n            return 'Wrong code, try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED ) {\r\n            return 'This code has expired.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS ) {\r\n            return 'Too many failed attempts.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.RESENT_CODE) {\r\n            return `Another code has been sent to ${selectedContactMethod === 'email' ? email : phone}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    formHelperTextIsError(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.RESENT_CODE;\r\n    }\r\n\r\n    displayResendCodeLink(): boolean {\r\n        const enterCodeStatusType: EnterCodeStatusType = this.state.enterCodeStatusType;\r\n\r\n        return  enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS || enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED;\r\n    }\r\n\r\n    async resendCodeClicked(e: any) { // TODO: Type\r\n        const { email, selectedContactMethod } = this.state;\r\n\r\n        try {\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.RESENT_CODE});   \r\n        }\r\n        catch (error) {\r\n            this.setState({ enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedContactMethod, phone, email } = this.state;\r\n        const contactDetail = selectedContactMethod === 'email' ? email : phone;\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Enter Security Code</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Please check your {selectedContactMethod} for the 8 digit code that was sent to {contactDetail}.</div>\r\n                        <TextField onChange={this.handleCodeChange} className=\"auth-txt-field\" label=\"########\" variant=\"filled\" helperText={this.getCodeHelperText()} error={this.displayCodeTextFieldError()}/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Enter Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormHelperText() ? \"\" : \"display-none\"}`} error={this.formHelperTextIsError()}>{this.getFormHelperText()}<span className={`resend-code ${this.displayResendCodeLink() ? \"\" : \"display-none\"}`} onClick={this.resendCodeClicked}>Resend Code?</span></FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to={`/pickresetmethod?email=${email}&phone=${phone}`}>\r\n                            <Button className=\"enter-code-btn non-important-btn\" color=\"primary\">Try Another Way</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterCode;","C:\\Users\\FamilyPC\\client\\src\\components\\ResetPassword.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\PickResetMethod.tsx",[],"C:\\Users\\FamilyPC\\client\\src\\components\\MedicineList.tsx",["255"],"import React from 'react';\r\n\r\nimport MedicineListItem from './MedicineListItem';\r\n\r\nimport './MedicineList.css';\r\n\r\ntype MedicineListState = {\r\n\r\n}\r\n\r\ntype MedicineListProps = {\r\n    medicineList: Array<string>\r\n}\r\n\r\nclass MedicineList extends React.Component<MedicineListProps, MedicineListState> {\r\n    constructor(props: MedicineListProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let medListItems = [];\r\n\r\n        for (let i = 0; i < this.props.medicineList.length; i++) {\r\n            medListItems.push(<MedicineListItem medicine={this.props.medicineList[i]}/>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"med-list\">\r\n                {medListItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MedicineList;","C:\\Users\\FamilyPC\\client\\src\\components\\MedicineListItem.tsx",["256"],"import React from 'react';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport './MedicineListItem.css';\r\n\r\ntype MedicineListItemState = {\r\n\r\n}\r\n\r\ntype MedicineListItemProps = {\r\n    medicine: string\r\n}\r\n\r\n\r\n\r\nfunction MedicineListItem(props: MedicineListItemProps) {\r\n    return (\r\n        <div className=\"med-list-item\">\r\n            <div>\r\n                <div className=\"med-name-txt\">{props.medicine}</div>\r\n            </div>\r\n            <div className=\"med-btns-container\">\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <EditIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// class MedicineListItem extends React.Component<MedicineListItemProps, MedicineListItemState> {\r\n//     constructor(props: MedicineListItemProps) {\r\n//         super(props);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"med-list-item\">\r\n//                 <div>\r\n//                     <div className=\"med-name-txt\">{this.props.medicine}</div>\r\n//                 </div>\r\n//                 <div className=\"med-btns-container\">\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <EditIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default MedicineListItem;","C:\\Users\\FamilyPC\\client\\src\\components\\AddMedicineDialog.tsx",["257","258"],"import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n//import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Medicine from '../models/Medicine';\r\nimport Units from '../models/Units';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker\r\n} from '@material-ui/pickers';\r\n\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\n\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\nimport './AddMedicineDialog.css';\r\n\r\ntype AddMedicineDialogState = {\r\n    medicine: Medicine | null,\r\n    ammount: number,\r\n    units: Units | null,\r\n    time: Date | null\r\n    startDate: Date | null;\r\n    endDate: Date | null;\r\n}\r\n\r\n\r\ntype AddMedicineDialogProps = {}\r\n\r\nclass AddMedicineDialog extends React.Component<AddMedicineDialogProps, AddMedicineDialogState> {\r\n\r\n    medicineList: Array<Medicine> = [\r\n        {\r\n            id: '123',\r\n            name: 'Tylenol'\r\n        },\r\n        {\r\n            id: '234',\r\n            name: 'Advil'\r\n        }\r\n    ]\r\n\r\n    constructor(props: AddMedicineDialogProps) {\r\n        super(props);\r\n\r\n        this.state = { medicine: this.medicineList[0], ammount: 0, units: Units.MG, time: null, startDate: null, endDate: null }\r\n\r\n        this.handleMedicineChange = this.handleMedicineChange.bind(this);\r\n        this.handleMedicineAmmountChange = this.handleMedicineAmmountChange.bind(this);\r\n        this.handleMedicineUnitsChange = this.handleMedicineUnitsChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    }\r\n\r\n    handleMedicineChange() {}\r\n\r\n    handleMedicineAmmountChange(e: any) {\r\n        const ammount: number = Number(e.target.value);\r\n        this.setState({ammount});\r\n    }\r\n    \r\n    handleMedicineUnitsChange() {}\r\n    \r\n    handleTimeChange(time: Date | null) {\r\n        this.setState({time});\r\n    }\r\n\r\n    handleStartDateChange(date: Date | null) {\r\n        this.setState({startDate: date});\r\n    }\r\n\r\n    handleEndDateChange(date: Date | null) {\r\n        this.setState({endDate: date});\r\n    }\r\n\r\n    handleSubmit(e: any) {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { time, startDate, endDate } = this.state;\r\n\r\n        // TODO: Async autocomplete for medicine name\r\n        //https://codesandbox.io/s/wj0r6?file=/demo.tsx\r\n\r\n        return (\r\n            <div className=\"grayout\">\r\n                <div className=\"add-medicine-dialog\">\r\n                    <div className=\"dialog-header\">\r\n                        <Typography className=\"dialog-title\" variant=\"h4\">Add Medicine</Typography>\r\n                    </div>\r\n                    <div className=\"dialog-body\">\r\n                        <div className=\"dialog-form\">\r\n                            <TextField onChange={this.handleMedicineChange} className=\"dialog-txt-field\" label=\"Medicine Name\" variant=\"filled\" error={false} helperText=\"Enter the medicine name\" />\r\n                            <div className=\"medicine-amt-container\">\r\n                                <TextField type=\"number\" InputProps={{ inputProps: { min: 0, max: 9999 } }} onChange={this.handleMedicineAmmountChange} className=\"medicine-amt\" label=\"Medicine Ammount\" variant=\"filled\" error={false} helperText=\"Enter the medcine ammount\" />\r\n                                <TextField onChange={this.handleMedicineUnitsChange} className=\"medicine-units\" label=\"Units\" variant=\"filled\" error={false}/>\r\n                            </div>\r\n                            <TextField className=\"dialog-txt-field\" label=\"Frequency\" variant=\"filled\" error={false} helperText=\"How often do you take this medicine?\" />\r\n                            \r\n                            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n                                <TimePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"h:mm a\"\r\n                                    value={time}\r\n                                    margin=\"normal\"\r\n                                    label=\"Time\"\r\n                                    onChange={this.handleTimeChange}\r\n                                    helperText=\"What time do you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <AccessAlarmIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={startDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Date\"\r\n                                    onChange={this.handleStartDateChange}\r\n                                    helperText=\"What's the first day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={endDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"End Date\"\r\n                                    onChange={this.handleEndDateChange}\r\n                                    helperText=\"What's the last day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                            </MuiPickersUtilsProvider>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialog-actions\">\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ () => {} } variant=\"contained\" size=\"medium\">Cancel</Button>\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ this.handleSubmit } variant=\"contained\" size=\"medium\">Add</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddMedicineDialog;","C:\\Users\\FamilyPC\\client\\src\\models\\Units.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\index.tsx",[],["259","260"],"C:\\Users\\FamilyPC\\homelessclient\\src\\theme.js",[],["261","262"],"C:\\Users\\FamilyPC\\homelessclient\\src\\contexts\\authContext.js",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\App.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\api\\auth.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\AccountSettings.tsx",["263","264","265","266"],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Main.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Schedule.tsx",["267"],"import React from 'react';\r\n\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { DateTime } from 'luxon';\r\n\r\nimport { Calendar, luxonLocalizer } from 'react-big-calendar';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nimport AddEventDialog from './AddEventDialog';\r\n\r\nimport ViewEventDialog from './ViewEventDialog';\r\n\r\nimport ErrorBox from './ErrorBox';\r\n\r\nimport Event from '../models/Event';\r\n\r\n\r\nimport './Schedule.css';\r\n\r\n// TODO: rename this maybe?\r\nimport * as eventAPI from '../api/event';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\n\r\ntype ScheduleProps = {};\r\ntype ScheduleState = {\r\n    currentEvent: Event | null,\r\n    addEventDialogOpen: boolean,\r\n    events: any,\r\n    eventsLoaded: boolean,\r\n    errorLoadingEvents: boolean,\r\n    deleteEventSnackbarOpen: boolean,\r\n    successAddEventSnackbarOpen: boolean,\r\n};\r\n\r\n\r\n\r\nclass Schedule extends React.Component<ScheduleProps, ScheduleState> {\r\n    constructor(props: ScheduleProps) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            currentEvent: null,\r\n            addEventDialogOpen:\r\n            false, events: [],\r\n            eventsLoaded: false,\r\n            errorLoadingEvents: false,\r\n            deleteEventSnackbarOpen: false,\r\n            successAddEventSnackbarOpen: false\r\n            \r\n        };\r\n\r\n        this.eventClicked = this.eventClicked.bind(this);\r\n\r\n        this.eventDeleted = this.eventDeleted.bind(this);\r\n\r\n        this.eventAdded = this.eventAdded.bind(this);\r\n\r\n        this.openViewEventDialog = this.openViewEventDialog.bind(this);\r\n        this.closeViewEventDialog = this.closeViewEventDialog.bind(this);\r\n\r\n        this.openAddEventDialog = this.openAddEventDialog.bind(this);\r\n        this.closeAddEventDialog = this.closeAddEventDialog.bind(this);\r\n\r\n        this.handleCloseAddEventSnackbar = this.handleCloseAddEventSnackbar.bind(this);\r\n        this.handleUndoAddEvent = this.handleUndoAddEvent.bind(this);\r\n\r\n        this.handleCloseDeleteEventSnackbar = this.handleCloseDeleteEventSnackbar.bind(this);\r\n        this.handleUndoDeleteEvent = this.handleUndoDeleteEvent.bind(this);\r\n    }\r\n\r\n    async componentWillMount() {\r\n        this.loadEvents();\r\n    }\r\n\r\n    async loadEvents() {\r\n        try {\r\n            // TODO: Types\r\n            var result = await eventAPI.getEvents();\r\n            var events: any = result.data;\r\n\r\n            //TODO: Type\r\n            events.forEach((event: any) => {\r\n                event.start = DateTime.fromISO(event.start).toJSDate();\r\n                event.end = DateTime.fromISO(event.end).toJSDate();\r\n            });\r\n\r\n            this.setState({events , eventsLoaded: true });\r\n        }\r\n        catch(e) {\r\n            console.error(\"error=\",e)\r\n            this.setState({errorLoadingEvents: true});\r\n        }\r\n    }\r\n\r\n    eventClicked(event: Event, e: any /*: SyntheticEvent*/) {\r\n        this.openViewEventDialog(event);\r\n    }\r\n\r\n    openViewEventDialog(event: Event) {\r\n        this.setState({currentEvent: event});\r\n    }\r\n\r\n    closeViewEventDialog() {\r\n        this.setState({currentEvent: null});\r\n    }\r\n\r\n    openAddEventDialog() {\r\n        this.setState({addEventDialogOpen: true});\r\n    }\r\n\r\n    closeAddEventDialog() {\r\n        this.setState({ addEventDialogOpen: false});\r\n    }\r\n\r\n    handleCloseDeleteEventSnackbar(event: React.SyntheticEvent<any>) {\r\n        this.setState({deleteEventSnackbarOpen: false})\r\n    }\r\n\r\n    handleUndoAddEvent(event: React.SyntheticEvent<any>) {\r\n        // TODO:\r\n    }\r\n\r\n    handleCloseAddEventSnackbar(event: React.SyntheticEvent<any>) {\r\n        this.setState({successAddEventSnackbarOpen: false})\r\n    }\r\n\r\n    handleUndoDeleteEvent(event: React.SyntheticEvent<any>) {\r\n        // TODO:\r\n    }\r\n\r\n    eventDeleted(id: number) {\r\n        let events: Event[] = this.state.events;\r\n        events = events.filter(event => event.id != id);\r\n\r\n        this.setState({events, deleteEventSnackbarOpen: true});\r\n\r\n        this.closeViewEventDialog();\r\n    }\r\n\r\n    eventAdded(event: Event) {  // TODO: Type\r\n        let events: any = this.state.events;\r\n        events.push(event);\r\n        \r\n        this.setState({events, successAddEventSnackbarOpen: true})\r\n        \r\n        this.closeAddEventDialog();\r\n    }\r\n\r\n    render() {\r\n        const localizer = luxonLocalizer(DateTime);\r\n        var that: any = this;\r\n\r\n        var events = this.state.events;\r\n\r\n        const { successAddEventSnackbarOpen, deleteEventSnackbarOpen, currentEvent, addEventDialogOpen, eventsLoaded, errorLoadingEvents } = this.state;\r\n        \r\n        function calendar() {\r\n            if (eventsLoaded) {\r\n                return (\r\n                    <Calendar\r\n                    localizer={localizer}\r\n                    events={events}\r\n                    style={{ height: 500 }}\r\n                    onSelectEvent={that.eventClicked}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return (null);\r\n        }\r\n\r\n        function spinner() {\r\n            if ( !eventsLoaded && !errorLoadingEvents) {\r\n                return (\r\n                    <div className=\"spinner-container\">\r\n                        <CircularProgress size=\"4rem\" color=\"primary\"/>\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            return (null);\r\n        }\r\n\r\n        function loadingError() {\r\n            if ( errorLoadingEvents ) {\r\n                return (\r\n                    <ErrorBox message=\"Couldn't load events!\" />\r\n                );\r\n            }\r\n\r\n            return (null);\r\n        }\r\n\r\n        function viewEventDialog() {\r\n            if (currentEvent) {\r\n                return (\r\n                    <ViewEventDialog onDelete={that.eventDeleted} event={currentEvent} onCancel={that.closeViewEventDialog} />\r\n                );\r\n            }\r\n        }\r\n\r\n        function addEventDialog() {\r\n            if (addEventDialogOpen) {\r\n                return (\r\n                    <AddEventDialog onEventAdded={that.eventAdded} onCancel={that.closeAddEventDialog} />\r\n                );\r\n            }\r\n\r\n            return (null);\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"page-container\">\r\n                <div className=\"page\">\r\n                    <Typography className=\"page-header\" color=\"primary\" variant=\"h3\">Upcoming Events</Typography>\r\n\r\n                    {calendar()}\r\n                    {loadingError()}\r\n                    {spinner()}\r\n                    {viewEventDialog()}\r\n                    {addEventDialog()}\r\n                    \r\n                    <Fab onClick={this.openAddEventDialog} className=\"add-event\" size=\"medium\"  aria-label=\"Add Event\" >\r\n                        <AddIcon color=\"primary\" />\r\n                    </Fab>\r\n                </div>\r\n                \r\n                <Snackbar\r\n                    open={successAddEventSnackbarOpen}\r\n                    autoHideDuration={6000}\r\n                    onClose={this.handleCloseAddEventSnackbar}\r\n                    message=\"Event Added\"\r\n                    action={\r\n                        <React.Fragment>\r\n                            <Button color=\"secondary\" size=\"small\" onClick={this.handleUndoAddEvent}>UNDO</Button>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"secondary\" onClick={this.handleCloseAddEventSnackbar}>\r\n                                <CloseIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n\r\n                <Snackbar\r\n                    open={deleteEventSnackbarOpen}\r\n                    autoHideDuration={6000}\r\n                    onClose={this.handleCloseDeleteEventSnackbar}\r\n                    message=\"Event Deleted\"\r\n                    action={\r\n                        <React.Fragment>\r\n                            <Button color=\"secondary\" size=\"small\" onClick={this.handleUndoDeleteEvent}>UNDO</Button>\r\n                            <IconButton size=\"small\" aria-label=\"close\" color=\"secondary\" onClick={this.handleCloseDeleteEventSnackbar}>\r\n                                <CloseIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Splash.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Login.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PickResetMethod.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Register.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\FindAccount.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\EnterCode.tsx",["268","269"],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PrivateRoute.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ResetPassword.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\Header.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PasswordInput.tsx",["270"],"C:\\Users\\FamilyPC\\homelessclient\\src\\api\\user.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\MedicineListItem.tsx",["271"],"C:\\Users\\FamilyPC\\homelessclient\\src\\models\\Units.tsx",[],["272","273"],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\MapComponent.tsx",["274"],"import React  from 'react';\r\n\r\ntype MapComponentState = {\r\n  \r\n}\r\n\r\ntype MapComponentProps = {\r\n\r\n}\r\n\r\n// TODO: Should {} be MapComponentProps\r\nclass MapComponent extends React.Component<{}, MapComponentState> {\r\n    constructor(props: MapComponentProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <h1>Map of Frederick</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapComponent;","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\PrayerRequests.tsx",["275"],"import React  from 'react';\r\n\r\ntype PrayerRequestsState = {\r\n\r\n}\r\n\r\ntype PrayerRequestsProps = {\r\n\r\n}\r\n\r\nclass PrayerRequests extends React.Component<PrayerRequestsProps, PrayerRequestsState> {\r\n    constructor(props: PrayerRequestsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Prayer Requests</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PrayerRequests;","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\HomelessPeople.tsx",["276"],"import React  from 'react';\r\n\r\ntype HomelessPeopleState = {\r\n\r\n}\r\n\r\ntype HomelessPeopleProps = {\r\n\r\n}\r\n\r\nclass HomelessPeople extends React.Component<HomelessPeopleProps, HomelessPeopleState> {\r\n    constructor(props: HomelessPeopleProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Homeless People</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomelessPeople;","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\AddEventDialog.tsx",["277","278","279","280","281","282"],"import React from 'react';\r\n\r\n\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n//import Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport * as eventAPI from '../api/event';\r\n\r\n//import LuxonUtils from 'luxon';\r\nimport LuxonUtils from '@date-io/luxon';\r\n\r\nimport { DateTime } from 'luxon';\r\n\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Event from '../models/Event';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker\r\n} from '@material-ui/pickers';\r\n\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\n\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\nimport './AddEventDialog.css';\r\n\r\ntype AddEventDialogState = {\r\n    title: string | null,\r\n    startTime: MaterialUiPickersDate | null,\r\n    endTime: MaterialUiPickersDate | null,\r\n    date: MaterialUiPickersDate | null,\r\n    description: string | undefined,\r\n    submitPressed: boolean,\r\n    internalServerError: boolean\r\n}\r\n\r\n\r\ntype AddEventDialogProps = {\r\n    onCancel: any // TODO: Type, optional/etc?\r\n    onEventAdded: (event: any) => void;\r\n}\r\n\r\nclass AddEventDialog extends React.Component<AddEventDialogProps, AddEventDialogState> {\r\n\r\n    constructor(props: AddEventDialogProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: '',\r\n            startTime: null,\r\n            endTime: null,\r\n            date: null,\r\n            description: undefined,\r\n            submitPressed: false,\r\n            internalServerError: false\r\n     };\r\n\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleStartTimeChange = this.handleStartTimeChange.bind(this);\r\n        this.handleEndTimeChange = this.handleEndTimeChange.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleTitleChange(e: any) {\r\n        const title: string = e.target.value;\r\n        this.setState({title});\r\n    }\r\n    \r\n    handleStartTimeChange(startTime: MaterialUiPickersDate | null) {\r\n        this.setState({startTime});\r\n    }\r\n\r\n    handleEndTimeChange(endTime: MaterialUiPickersDate | null) {\r\n        this.setState({endTime});\r\n    }\r\n\r\n    handleDateChange(date: MaterialUiPickersDate | null) {\r\n        this.setState({ date: date});\r\n    }\r\n\r\n    handleDescriptionChange(e: any) {\r\n        const description: string = e.target.value;\r\n        this.setState({description});\r\n    }\r\n\r\n    // TODO: Correct type\r\n    handleCancel(e: any) {\r\n        this.props.onCancel();\r\n    }\r\n\r\n    titlehasErrorTxt(): boolean {\r\n        const { title, submitPressed } = this.state;\r\n\r\n        return submitPressed && !title;\r\n    }\r\n\r\n    datehasErrorTxt(): boolean {\r\n        const { date, submitPressed } = this.state;\r\n\r\n        return submitPressed && !date;\r\n    }\r\n\r\n    startTimehasErrorTxt(): boolean {\r\n        const { startTime, submitPressed } = this.state;\r\n\r\n        return submitPressed && !startTime;\r\n    }\r\n\r\n    // TODO: Error where start time is after end time\r\n    endTimehasErrorTxt(): boolean {\r\n        const { endTime, submitPressed } = this.state;\r\n\r\n        return submitPressed && (!endTime || !this.endTimeIsValid()) ;\r\n    }\r\n\r\n    endTimeIsValid(): boolean {\r\n        const { startTime, endTime } = this.state;\r\n\r\n        if ( startTime && endTime ) {\r\n            if ( startTime > endTime ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    getEndTimeHelperTxt(): string {\r\n        const { endTime, submitPressed } = this.state;\r\n\r\n        if ( submitPressed && !this.endTimeIsValid() ) {\r\n            return 'End time must be after start time';\r\n        }\r\n\r\n        return 'What time should the outreach end?';\r\n    }\r\n\r\n    // TODO: Correct type\r\n    async handleSubmit(e: any) {\r\n\r\n        this.setState({submitPressed: true});\r\n\r\n        const { title, startTime, endTime, date, description } = this.state;\r\n\r\n\r\n        if ( !title || !date || !startTime || !endTime || !this.endTimeIsValid() ) {\r\n            return;\r\n        }\r\n\r\n        const startHours: number = startTime.hour;\r\n        const startMinutes: number = startTime.minute;\r\n\r\n        const endHours: number = endTime.hour;\r\n        const endMinutes: number = endTime.minute;\r\n\r\n        // TODO: Type\r\n        const startDateAndTime: any = date.set({hour: startHours, minute: startMinutes});\r\n        const endDateAndTime: any = date.set({hour: endHours, minute: endMinutes});\r\n\r\n        try {\r\n            let response = await eventAPI.createEvent({ title, start: startDateAndTime.toJSDate(), end: endDateAndTime.toJSDate(), description });\r\n            \r\n            let event = response.data;\r\n            event.start = DateTime.fromISO(event.start).toJSDate();\r\n            event.end = DateTime.fromISO(event.end).toJSDate();\r\n        \r\n            this.props.onEventAdded(event);\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 500 ) {\r\n                this.setState({internalServerError: true});\r\n            }\r\n            else {\r\n                console.error('Unhandled error'); // TODO: Handle this\r\n            }\r\n        }\r\n    }\r\n\r\n    hasInternalServerError(): boolean {\r\n        return this.state.internalServerError;\r\n    }\r\n\r\n\r\n    render() {\r\n        const { startTime, endTime, date } = this.state;\r\n\r\n        // TODO: Async autocomplete for medicine name\r\n        //https://codesandbox.io/s/wj0r6?file=/demo.tsx\r\n        \r\n        return (\r\n            <div className=\"grayout\">\r\n                <div className=\"add-event-dialog\">\r\n                    <div className=\"dialog-header\">\r\n                        <Typography className=\"dialog-title\" variant=\"h4\">Add Event</Typography>\r\n                    </div>\r\n                    <div className=\"dialog-body\">\r\n                        <div className=\"dialog-form\">\r\n                            <TextField error={this.titlehasErrorTxt()} onChange={this.handleTitleChange} className=\"dialog-txt-field\" label=\"Title\" variant=\"filled\" helperText=\"Enter the title of the outreach event\" inputProps={{ maxLength: 64 }} />\r\n\r\n                            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n                                <DatePicker\r\n                                    error={this.datehasErrorTxt()}\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={date}\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Date\"\r\n                                    onChange={this.handleDateChange}\r\n                                    helperText=\"What date should the outreach be on?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <TimePicker\r\n                                    error={this.startTimehasErrorTxt()}\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"h:mm a\"\r\n                                    value={startTime}\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Time\"\r\n                                    onChange={this.handleStartTimeChange}\r\n                                    helperText=\"What time should the outreach start?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <AccessAlarmIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <TimePicker\r\n                                    error={this.endTimehasErrorTxt()}\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"h:mm a\"\r\n                                    value={endTime}\r\n                                    margin=\"normal\"\r\n                                    label=\"End Time\"\r\n                                    onChange={this.handleEndTimeChange}\r\n                                    helperText={this.getEndTimeHelperTxt()}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <AccessAlarmIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                            </MuiPickersUtilsProvider>\r\n\r\n                            <TextField\r\n                                label=\"Description\"\r\n                                multiline\r\n                                rows={4}\r\n                                onChange={this.handleDescriptionChange}\r\n                                helperText=\"Enter the description of this event\"\r\n                                variant=\"filled\"\r\n                                inputProps={{ maxLength: 2048 }}\r\n                            />\r\n\r\n                            <FormHelperText className={`${this.hasInternalServerError() ? \"\" : \"display-none\"}`} error={true}>Uh-oh! A problem occured. Please refresh the page and try again.</FormHelperText>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialog-actions\">\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ this.handleCancel } variant=\"contained\" size=\"medium\">Cancel</Button>\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ this.handleSubmit } variant=\"contained\" size=\"medium\">Add</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddEventDialog;","C:\\Users\\FamilyPC\\homelessclient\\src\\api\\event.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\models\\Event.tsx",[],"C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ErrorBox.tsx",["283"],"import React  from 'react';\r\n\r\nimport './ErrorBox.css';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\n// TODO: Make functional component\r\n\r\ntype ErrorBoxState = {}\r\n\r\ntype ErrorBoxProps = {\r\n    message: string\r\n}\r\n\r\nclass ErrorBox extends React.Component<ErrorBoxProps, ErrorBoxState> {\r\n    constructor(props: ErrorBoxProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"error-box\">\r\n                <ErrorIcon color=\"error\"/>\r\n                <div className=\"error-msg\">{this.props.message}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ErrorBox;","C:\\Users\\FamilyPC\\homelessclient\\src\\components\\ViewEventDialog.tsx",["284"],"import React  from 'react';\r\n\r\nimport './ViewEventDialog.css';\r\n\r\nimport churchImg from '../img/ggchurch.png';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { DateTime } from 'luxon';\r\n\r\nimport * as eventAPI from '../api/event';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport Event from '../models/Event';\r\n\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\ntype ViewEventDialogProps = {\r\n    event: Event\r\n    onCancel: () => void;\r\n    onDelete: (id: number) => void;\r\n}\r\n\r\ntype ViewEventDialogState = {\r\n    internalServerError: boolean;\r\n    notFound404Error: boolean;\r\n}\r\n\r\nclass ViewEventDialog extends React.Component<ViewEventDialogProps, ViewEventDialogState> {\r\n    constructor(props: ViewEventDialogProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            internalServerError: false,\r\n            notFound404Error: false\r\n\r\n        };\r\n\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    // TODO: Correct type\r\n    handleCancel(e: any) {\r\n        this.props.onCancel();\r\n    }\r\n\r\n    async handleDelete() {\r\n        const id: any = this.props.event.id;\r\n        try {\r\n            await eventAPI.deleteEvent(id);\r\n\r\n            this.setState({internalServerError: false, notFound404Error: false});\r\n            this.props.onDelete(id);\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 500 ) {\r\n                this.setState({internalServerError: true});\r\n            }\r\n            else if (error.response.status === 404) {\r\n                this.setState({notFound404Error: true});\r\n            }\r\n            else {\r\n                console.error('Unhandled error')\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { title, start, end, description } = this.props.event;\r\n        const { internalServerError, notFound404Error } = this.state;\r\n\r\n        const startStr: string = DateTime.fromJSDate(start).toFormat('MMMM dd, h:mm a');\r\n        const endStr: string = DateTime.fromJSDate(end).toFormat('h:mm a');\r\n        const dateTimeStr: string = `${startStr} - ${endStr}`;\r\n\r\n        return (\r\n            <div className=\"grayout\">\r\n                <div className=\"view-event-dialog\">\r\n                    <div className=\"view-dialog-header\">\r\n                        <div className=\"primary-header\">{title}</div>\r\n                        <div className=\"secondary-header\">{dateTimeStr}</div>\r\n                    </div>\r\n                    <div className=\"location-img-container\">\r\n                        <img className=\"location-img\" src={churchImg} alt=\"greater grace church\" />\r\n                    </div>\r\n                    <div className=\"view-dialog-body\">\r\n                        <div className=\"event-description\">{description}</div>\r\n                        <div className=\"actions-container\">\r\n                            <Button onClick={this.handleDelete } className=\"delete-event-icon\" variant=\"outlined\" endIcon={<DeleteIcon color=\"primary\" />}>\r\n                                <div className=\"delete-txt\">Delete</div>\r\n                            </Button>\r\n                            <Button className=\"edit-event-icon\" variant=\"outlined\" endIcon={<EditIcon color=\"primary\" />}>\r\n                                <div className=\"edit-txt\">Edit</div>\r\n                            </Button>\r\n                            <Button onClick={ this.handleCancel } className=\"close-event-dialog\" variant=\"outlined\" endIcon={<CloseIcon color=\"primary\" />}>Done</Button>\r\n                        \r\n                            <FormHelperText className={`delete-err ${notFound404Error ? \"\" : \"display-none\"}`} error={true}>Uh-oh! A problem occured. The event may have already been deleted. Please refresh the page and try again.</FormHelperText>\r\n                            <FormHelperText className={`delete-err ${internalServerError ? \"\" : \"display-none\"}`} error={true}>Uh-oh! A problem occured. Please refresh the page and try again.</FormHelperText>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewEventDialog;",{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","severity":1,"message":"290","line":12,"column":5,"nodeType":"291","messageId":"292","endLine":14,"endColumn":6},{"ruleId":"289","severity":1,"message":"290","line":12,"column":5,"nodeType":"291","messageId":"292","endLine":14,"endColumn":6},{"ruleId":"289","severity":1,"message":"290","line":8,"column":5,"nodeType":"291","messageId":"292","endLine":10,"endColumn":6},{"ruleId":"289","severity":1,"message":"290","line":17,"column":5,"nodeType":"291","messageId":"292","endLine":19,"endColumn":6},{"ruleId":"293","severity":1,"message":"294","line":55,"column":17,"nodeType":"295","messageId":"296","endLine":55,"endColumn":24},{"ruleId":"293","severity":1,"message":"297","line":87,"column":34,"nodeType":"295","messageId":"296","endLine":87,"endColumn":38},{"ruleId":"293","severity":1,"message":"298","line":103,"column":53,"nodeType":"295","messageId":"296","endLine":103,"endColumn":58},{"ruleId":"289","severity":1,"message":"290","line":16,"column":5,"nodeType":"291","messageId":"292","endLine":18,"endColumn":6},{"ruleId":"293","severity":1,"message":"299","line":7,"column":6,"nodeType":"295","messageId":"296","endLine":7,"endColumn":27},{"ruleId":"293","severity":1,"message":"300","line":8,"column":8,"nodeType":"295","messageId":"296","endLine":8,"endColumn":14},{"ruleId":"293","severity":1,"message":"301","line":9,"column":8,"nodeType":"295","messageId":"296","endLine":9,"endColumn":16},{"ruleId":"285","replacedBy":"302"},{"ruleId":"287","replacedBy":"303"},{"ruleId":"285","replacedBy":"302"},{"ruleId":"287","replacedBy":"303"},{"ruleId":"293","severity":1,"message":"304","line":12,"column":8,"nodeType":"295","messageId":"296","endLine":12,"endColumn":16},{"ruleId":"293","severity":1,"message":"305","line":14,"column":8,"nodeType":"295","messageId":"296","endLine":14,"endColumn":17},{"ruleId":"293","severity":1,"message":"306","line":15,"column":8,"nodeType":"295","messageId":"296","endLine":15,"endColumn":22},{"ruleId":"289","severity":1,"message":"290","line":31,"column":5,"nodeType":"291","messageId":"292","endLine":33,"endColumn":6},{"ruleId":"307","severity":1,"message":"308","line":147,"column":50,"nodeType":"309","messageId":"310","endLine":147,"endColumn":52},{"ruleId":"293","severity":1,"message":"297","line":87,"column":34,"nodeType":"295","messageId":"296","endLine":87,"endColumn":38},{"ruleId":"293","severity":1,"message":"298","line":103,"column":53,"nodeType":"295","messageId":"296","endLine":103,"endColumn":58},{"ruleId":"293","severity":1,"message":"294","line":55,"column":17,"nodeType":"295","messageId":"296","endLine":55,"endColumn":24},{"ruleId":"293","severity":1,"message":"299","line":7,"column":6,"nodeType":"295","messageId":"296","endLine":7,"endColumn":27},{"ruleId":"285","replacedBy":"311"},{"ruleId":"287","replacedBy":"312"},{"ruleId":"289","severity":1,"message":"290","line":13,"column":5,"nodeType":"291","messageId":"292","endLine":15,"endColumn":6},{"ruleId":"289","severity":1,"message":"290","line":12,"column":5,"nodeType":"291","messageId":"292","endLine":14,"endColumn":6},{"ruleId":"289","severity":1,"message":"290","line":12,"column":5,"nodeType":"291","messageId":"292","endLine":14,"endColumn":6},{"ruleId":"293","severity":1,"message":"313","line":15,"column":8,"nodeType":"295","messageId":"296","endLine":15,"endColumn":18},{"ruleId":"293","severity":1,"message":"314","line":17,"column":8,"nodeType":"295","messageId":"296","endLine":17,"endColumn":17},{"ruleId":"293","severity":1,"message":"300","line":29,"column":8,"nodeType":"295","messageId":"296","endLine":29,"endColumn":14},{"ruleId":"293","severity":1,"message":"301","line":30,"column":8,"nodeType":"295","messageId":"296","endLine":30,"endColumn":16},{"ruleId":"293","severity":1,"message":"315","line":32,"column":8,"nodeType":"295","messageId":"296","endLine":32,"endColumn":13},{"ruleId":"293","severity":1,"message":"316","line":152,"column":17,"nodeType":"295","messageId":"296","endLine":152,"endColumn":24},{"ruleId":"289","severity":1,"message":"290","line":15,"column":5,"nodeType":"291","messageId":"292","endLine":17,"endColumn":6},{"ruleId":"293","severity":1,"message":"313","line":13,"column":8,"nodeType":"295","messageId":"296","endLine":13,"endColumn":18},"no-native-reassign",["317"],"no-negated-in-lhs",["318"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","@typescript-eslint/no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","'code' is assigned a value but never used.","'phone' is assigned a value but never used.","'MedicineListItemState' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.",["317"],["318"],"'DoneIcon' is defined but never used.","'TextField' is defined but never used.","'FormHelperText' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["317"],["318"],"'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'Event' is defined but never used.","'endTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]